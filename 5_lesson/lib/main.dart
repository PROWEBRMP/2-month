// ignore_for_file: prefer_const_constructors

import 'package:flutter/material.dart';
import 'package:lesson_5/home_work.dart';

/* 
Центральным элементом приложения на Flutter являются виджеты. Фактически это 
те визуальные компоненты, из которых состоит графический интерфейс.

Рассмотрим простейший пример. 
Прежде всего создадим новый проект Flutter.

Введение в виджеты в Flutter

!!! По умолчанию код приложения размещается в файле lib/main.dart. Откроем этот файл и изменим его содержимое: */

void main() {
// Выполнение приложения Flutter начинается с функции main.
// Для создания графического интерфейса в этой функции вызывается другая встроенная функция - runApp(Widget app).
// Она прикрепляет определенный виджет к экрану. То есть по сути это, что мы видим при запуске приложения на
// экране устройства. Прикрепляемый виджет передается в функцию runApp() в качестве параметра.

  runApp(
    // Все виджеты наследуется от класса Widget.
    // В данном случае в функцию runApp передается виджет Text,
    // который предназначен для вывода текста на экран. Через
    // конструктор этого класса устанавливаются три его свойства.
    const Text(
      // Прежде всего отображаемый текст, для которого передается строка 'Привет Flutter!'.
      'Привет Flutter!',
      // И также устанавливаются свойство textDirection, которое задает направление
      // и свойство textAlign, которое задает выравнивание текста по горизонтали и принимает значение
      // TextAlign.center (то есть текст выравнивается по центру).
      textAlign: TextAlign.center,
      // текста и принимает значение TextDirection.ltr (направление текста слева направо),
      textDirection: TextDirection.ltr,
      style: TextStyle(
        // цвет текста
        color: Colors.white,
        // цвет фона
        backgroundColor: Colors.red,
        // размер шрифта
        fontSize: 24,
        // Жирность шрифта
        fontWeight: FontWeight.bold,
        // Тип шрифта
        fontStyle: FontStyle.italic,
        // Отступы между буквами
        letterSpacing: 5,
        // Отступы между словами
        wordSpacing: 122,
        overflow: TextOverflow.ellipsis,
        // TextOverflow.clip: текст усекается таким образом, чтобы вместиться по длине контейнера
        // TextOverflow.ellipsis: в конце вмещаемого текста добавляется многоточие
        // TextOverflow.fade: конец текста плавно теряет цвет
        // TextOverflow.visible: текст виден вне контейнера
      ),
    ),

    // Чтобы организовать и расположить определенным образом один виджет или наборы виджетов
    // применяются специальные виджеты - контейнеры компоновки (layout widgets),
    // Которые управляют компоновкой виджетов (в том числе и других контейнеров). Во Flutter эта группа виджетов очень широко представлена. Рассмотрим некоторые из них.

    // Основные виджеты компоновки
    // ==============================================================================================================
    // Align()
    // ==============================================================================================================
    // Виджет Align позволяет позиционировать вложенный элемент относительно определенной стороны контейнера. По умолчанию он растягивается по всей ширине и высоте контейнера, заполняя все его пространство.

    // Для создания виджета применяется следующий конструктор:

    // 1
    // Align({Key key, AlignmentGeometry alignment: Alignment.center, double widthFactor, double heightFactor, Widget child})
    // Как видно из сигнатуры конструктора все его параметры необязательные. Для установки вложенного элемента, к которому будет применяться выравнивание по определенному краю контейнера, используется параметр child - в его качестве может выступать любой объект Widget, то есть любой виджет.

    // Дополнительные параметры widthFactor и heightFactor коэффициент изменения ширины и высоты виджета Center относительно вложенного дочернего элемента. Например, если widthFactor равен 2.0, то ширина виджета Center будет равна ширине дочернего элемента, умноженной на 2.0. То же самое касается и heightFactor, только он изменяет высоту.

    // Для установки выравнивания применяется параметр alignment, который представляет класс AlignmentGeometry и может принимать следующие значения:

    // Alignment.bottomCenter: выравнивание по горизонтали по центру, по вертикали - у нижнего края контейнера (внизу по центру). Аналогично значению Alignment(0.0, 1.0)

    // Alignment.bottomLeft: выравнивание по горизонтали по левому краю, по вертикали - у нижнего края контейнера (внизу слева). Аналогично значению Alignment(-1.0, 1.0)

    // Alignment.bottomRight : выравнивание по горизонтали по правому краю, по вертикали - у нижнего края контейнера (внизу справа). Аналогично значению Alignment(1.0, 1.0)

    // Alignment.center: выравнивание по горизонтали и по вертикали по центру. Аналогично значению Alignment(0.0, 0.0)

    // Alignment.centerLeft: выравнивание по горизонтали по левому краю, по вертикали - по центру контейнера. Аналогично значению Alignment(-1.0, 0.0)

    // Alignment.centerRight: выравнивание по горизонтали по правому краю, по вертикали - по центру контейнера. Аналогично значению Alignment(1.0, 0.0)

    // Alignment.topCenter: выравнивание по горизонтали по центру, по вертикали - у верхнего края контейнера (вверху по центру). Аналогично значению Alignment(0.0, -1.0)

    // Alignment.topLeft: выравнивание по горизонтали по левому краю, по вертикали - у верхнего края контейнера (вверху слева). Аналогично значению Alignment(-1.0, -1.0)

    // Alignment.topRight: выравнивание по горизонтали по правому краю, по вертикали - у верхнего края контейнера (вверху справа). Аналогично значению Alignment(1.0, -1.0)

    // Несмотря на то, что в конструкторе параметр alignment представляет класс AlignmentGeometry, здесь же константы представляют класс Alignment, который унаследован от AlignmentGeometry.

    // Используем виджет Align для размещения текста, к примеру, слева по центру:

    //     const Align(
    //   alignment: Alignment.centerLeft,
    //   child: Text(
    //     'Текст слева по центру!',
    //     textDirection: TextDirection.ltr, // текст слева направо
    //     style: TextStyle(fontSize: 24), // высота шрифта 24
    //   ),
    // )

    // Align и alignment выравнивание в Flutter
    // FractionalOffset
    // Класс FractionalOffset унаследован от класса Alignment и предоставляет дополнительные возможности для позиционирования элемента. Он имеет следующий конструктор:

    // FractionalOffset(double dx, double dy)
    // где dx - это смещение по горизонтали, а dy - смещение по вертикали. Смещения выражаются в долях от 0.0 до 1.0, например, FractionalOffset(1.0, 0.0) представляет верхний правый угол контейнера, а FractionalOffset(0.0, 1.0) - нижний левый угол. Соответственно FractionalOffset(0.5, 0.5) - это центр (как по горизонтали, так и по вертикали). Указав нужное смещение, мы можем расположить элемент в определенной части контейнера. Например:

    //     Align(
    //   alignment: FractionalOffset(0.5, 0.5),
    //   child: Text(
    //     'Hello Flutter',
    //     textDirection: TextDirection.ltr, // текст слева направо
    //     style: TextStyle(fontSize: 20), // высота шрифта 20
    //   ),
    // )

    // Значение FractionalOffset(0.2, 0.3) указывает, что верхний угол вложенного элемента Text будет находиться по следующим координатам: X = ширина_контейнера_Align * 0.2, Y = высота_контейнера_Align * 0.3.

    // ==============================================================================================================
    // Center
    // ==============================================================================================================
    // Center располагает вложенный элемент по центру. Он унаследован от класса Align, поэтому во многом перенимает у него функционал. По умолчанию он растягивается по всей ширине и высоте контейнера, заполняя все его пространство.

    // Для создания виджета применяется следующий конструктор:

    // Center({Key key, double widthFactor, double heightFactor, Widget child})

    // Для установки вложенного элемента, к которому будет применяться центрирование, используется параметр child - в его качестве может выступать любой объект Widget, то есть любой виджет.

    // Дополнительные параметры widthFactor и heightFactor устанавливают коэффициент изменения ширины и высоты виджета Center относительно вложенного дочернего элемента. Например, если widthFactor равен 2.0, то ширина виджета Center будет равна ширине дочернего элемента, умноженной на 2.0. То же самое касается и heightFactor, только он изменяет высоту.

    // Например, разместим по центру небольшой текст с использованием виджета Center:

    // Center(
    //       child:Text(
    //       'Hello Flutter',
    //       textDirection: TextDirection.ltr,   // текст слева направо
    //     )
    //   )
    //   );
    // }

    // ==============================================================================================================
    // Padding
    // ==============================================================================================================

    // Виджет Padding позволяет задать отступы для вложенного элемента.

    // Он применяет следующий конструктор:

    // Padding({Key key, @required EdgeInsetsGeometry padding, Widget child})

    // Для установки отступов в конструкторе применяется параметр padding, который является обязательным параметром. Он представляет класс EdgeInsetsGeometry. Чтобы задать отступы, мы можем использовать один из конструкторов этого класса:

    // EdgeInsets.all(double value): устанавливает одно значение double для всех четырех отступов (слева, сверху, справа и снизу)

    // EdgeInsets.fromLTRB(double left, double top, double right, double bottom): устанавливает для каждой из четырех сторон свое значение отступ

    // EdgeInsets.fromWindowPadding(WindowPadding padding, double devicePixelRatio): определяет простанство, которое соответствует параметру padding

    // EdgeInsets.only({double left: 0.0, double top: 0.0, double right: 0.0, double bottom: 0.0}): устанавливает для каждой из четырех сторон ненулевые значения отступов

    // EdgeInsets.symmetric({double vertical: 0.0, double horizontal: 0.0}): vertical устанавливает верхний и нижний отступ, а horizontal - левый и правый.

    // Сначала рассмотрим пример, где не применяются отступы:

    // Align(
    //       alignment: Alignment.topCenter,
    //       child: Text(
    //         'Hello Flutter from metanit.com',
    //           textDirection: TextDirection.ltr
    //       )
    //     )
    //   );
    // }

    // ==============================================================================================================

    HomeWork(),
  );
}

// Но на данный момент можно не обращать внимание на этот момент. Более того файл widget_test.dart можно пока вовсе удалить.

// Итак, мы определили самое минимальное приложение Flutter. В итоге при запуске приложения мы увидим вверху по центру устройства искомый текст:

// Widget в Flutter

// Одни виджеты могут включать другие, образуя тем самым иерархическую систему в виде дерева. Например, разместим текст по центру экрана по вертикали. Для этого воспользуемся виджетом Align:

/* Теперь корневым виджетом, который передается в функцию runApp, является виджет Align. С помощью свойства alignment задается выравнивание вложенных элементов. В данном случае значение Alignment.center указывает, что выравнивание будет идти по центру как по горизонтали, так и по вертикали.

Другое свойство - child представляет вложенный виджет - в данном случае ранее использовавшийся виджет Text.

Когда мы запустим приложение, по сути мы увидим виджет Align, внутри которого расположен виджет Text:

Иерархия виджетов в Flutter */
