// Dart Начало изучения ООП
// Объекты и классы
void main() {
  // Класс представляет новый тип, поэтому мы можем определять переменные, которые представляют данный тип.
  // Car cobalt;
  // Так, здесь в функции main определена переменная cobalt, которая представляет класс Car.
  // Но пока эта переменная не указывает ни на какой объект и по умолчанию она имеет значение null.
  // По большому счету мы ее пока не можем использовать, поэтому вначале необходимо создать объект класса Car.

  // Выше определенный класс Car не имеет никаких конструкторов. Поэтому для него автоматически создается
  // конструктор по умолчанию, который мы можем использовать для создания объекта Car. В частности,
  //создадим один объект:
  Car cobalt = Car('', 0);

  // После создания объекта мы можем обратиться к переменным и методам объекта Car через переменную cobalt.
  // Для этого используется оператор точка (.) - то есть через точку указываем название поля или метода:
  // tom.name.

  // Например, можно установить или получить значения полей: cobalt.name = "Кобальт".
  cobalt.display();
  // изменяем название и год выхода
  cobalt.name = 'Кобальт';
  cobalt.year = 2016;
  cobalt.display();

  Car bugatti = Car('Bugatti', 2020); // вызов первого конструктора
  bugatti.display();

  Car bugattiChiron = Car.forBuggati('Chiron'); // вызов второго конструктора
  bugattiChiron.display();

  Car malibu = Car.malibu(2019);
  malibu.display(); // вызов третьего конструктора

  Car tayota = Car.withThis('Тайота', 2019);
  tayota.display();

  Car tiko = Car.short('Tiko', 2010);
  tiko.display();

  Car supra = Car.forName('Supra');
  supra.display();

  Car captiva = Car.init('Captiva', 1919);
  captiva.display();
}

/* 
Dart является объектно-ориентированным языком, и каждое значение, 
которым мы манипулируем в программе на Dart, является объектом.

Объект представляет экземпляр некоторого класса, а класс является шаблоном или описанием объекта. 
Можно еще провести следующую аналогию. У нас у всех есть некоторое представление о машине - наличие четырех колес, 
четырех дверей, одного руля и тд. Есть некоторый шаблон - этот шаблон можно назвать классом. Реально же существующий автомобиль
(фактически экземпляр данного класса) является объектом этого класса. 

*/

// Класс определяется с помощью ключевого слова сlass:
class Car {
  // Кроме обычных методов классы могут определять специальные методы, которые называются конструкторами.
  // Конструкторы вызываются при создании нового объекта данного класса. Конструкторы выполняют
  //инициализацию объекта.

  // Если необходимо, что при создании объекта производилась какая-то логика, например, чтобы поля 
  //класса получали какие-то
  // определенные значения, то можно определить в классе свои конструкторы. Например:
  Car(String n, int a) {
    name = n;
    year = a;
  }
  // По умолчанию мы можем определить только один общий конструктор. Если же нам необходимо использовать в классе сразу несколько
  // конструкторов, то в этом случае нужно применять именованные конструкторы (named constructors). Например:
  Car.forBuggati(String model) {
    year = 2021;
    name = 'Bugatti $model';
  }

  Car.malibu(int y) {
    year = y;
    name = 'Malibu';
  }

  Car.withThis(String name, int year) {
    // В конструкторе параметры называются так же, как и поля класса.
    // И чтобы разграничить поля и параметры, применяется ключевое слово this:
    this.name = name;
    this.year = year;
  }

  // Вызов цепочки конструкторов
  Car.forName(String name) : this(name, 2020);

  // Также используя ключевое слово this, мы можем сократить определение конструктора:
  Car.short(this.name, this.year); // Сокращенный именованный конструктор

  // Инициализаторы представляют способ инициализации полей класса:
  // Список инициализации указывает после параметров конструктора через двоеточие до открывающей фигурной скобки:
  Car.init(String txt, int num)
      : name = txt,
        year = num - 20 {
    // Стоит учитывать, что при использовании инициализаторов сначала выполняется инициализация полей в
    // списках инициализации и только затем выполняется логика в конструкторе
    print('Машина $name, инициализированна!!!');
  }
  // Любой объект может обладать двумя основными характеристиками:
  //  1) состояние - некоторые данные, которые хранит объект,
  //  2) поведение - действия, которые может совершать объект.

  // Для хранения состояния объекта в классе применяются поля или переменные класса.
  String name = "undefined"; // Название
  int year = 0; // год выхода

  // Стоит учитывать, что поскольку переменные name и year представляют типы String и int,
  // которые не допускают значение null, то нам необходимо предоставить этим переменным начальные значения.
  // Либо мы могли бы использовать nullable-типы, тогда предоставление начальных значений было бы необязательно:
  // String? name;
  // int? year;

  // Для определения поведения объекта в классе применяются методы.
  void display() {
    print("Name: $name\nYear: $year\n");
  }
}
